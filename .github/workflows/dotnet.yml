# This workflow will build a .NET project j
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Lab1
env:
  EB_PACKAGE_S3_BUCKET_NAME : "lab1-application-packages"
  EB_APPLICATION_NAME : "MyCICDLab1"
  EB_ENVIRONMENT_NAME : "MyCICDLab1-env"
  DEPLOY_PACKAGE_NAME : "Lab1_app_${{ github.sha }}.zip"
  AWS_REGION_NAME : "us-west-2"
  
  RELEASE_REVISION: "pr-${{ github.event.pull_request.number }}-${{ github.event.pull_request.head.sha }}"
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  KUBE_NAMESPACE: production
  ECR_REPOSITORY: my-cool-application
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

on:
  push:
    branches: 
      - master

jobs:
  test_build_project:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)
    - name: run a 1-line script
      run: echo Hello, world! Im work!
      
  My_CI:
    runs-on: ubuntu-latest
    needs: [test_build_project]
    
    steps:
    - name: Git clone repo
      uses: actions/checkout@v1
    - name : Create ZIP deploy package
      run : zip -r ${{ env.DEPLOY_PACKAGE_NAME }} ./ -x *.git* 
      #створення зіп пакету проекта з уникненням файлів гіта
      #закидую в бакет
      
    - name: Configure my AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id : ${{ secrets.MY_AWS_ACCESS_KEY }}
        aws-secret-access-key : ${{ secrets.MY_AWS_SECRET_KEY }} 
        aws-region :  ${{ env.AWS_REGION_NAME }}
   
    - name: Copy Deployment package to S3 bucket
      run : aws s3 cp ${{ env.DEPLOY_PACKAGE_NAME }}  s3://${{ env.EB_PACKAGE_S3_BUCKET_NAME }}/
      # закидаю архів в бакет на aws
      
    - name: Print some msg for CI finish
      run : echo "CI Pipeline part Finished successfully!"
      
  my_cd_part:
    runs-on: ubuntu-latest
    needs: [My_CI]
    
    steps:
    - name: Configure my AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id : ${{ secrets.MY_AWS_ACCESS_KEY }}
        aws-secret-access-key : ${{ secrets.MY_AWS_SECRET_KEY }} 
        aws-region :  ${{ env.AWS_REGION_NAME }}
    - name: Create new ElasticBeanstalk App
      run : |
        aws elasticbeanstalk create-application-version \
        --application-name ${{ env.EB_APPLICATION_NAME }} \
        --source-bundle S3Bucket="${{ env.EB_PACKAGE_S3_BUCKET_NAME }}",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
        --version-label "Ver-${{ github.sha }}" \
        --description "CommitSHA-${{ github.sha }}"
        
    - name: Deploy new ElasticBeanstalk App Version
      run : aws elasticbeanstalk update-environment --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --version-label "Ver-${{ github.sha }}"
    
    - name: Print some msg for CD finish
      run : echo "CD Pipeline part Finished successfully!"
      
      
  CD_DeployToEKS:
    runs-on: ubuntu-latest
    needs: [My_CI]
    
    steps:
    - name: Login to Amazon ECR
      id: login-ecr                        
      uses: aws-actions/amazon-ecr-login@v1
    # beter cache docker layers  
    - name: Set up Docker Buildx                             
      id: buildx                                             
      uses: docker/setup-buildx-action@master                
    - name: Docker cache layers                              
      uses: actions/cache@v2                                 
      with:                                                  
        path: /tmp/.buildx-cache                             
        key: ${{ runner.os }}-single-buildx-${{ github.sha }}
        restore-keys: |                                      
          ${{ runner.os }}-single-buildx  
     
    - name: Build & Push Image                                                                                      
      env:                                                                                                          
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}                                                       
        RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.RELEASE_REVISION }}
      run: |
        docker buildx create --use

        docker buildx build \                                
        --cache-from=type=local,src=/tmp/.buildx-cache \   
        --cache-to=type=local,dest=/tmp/.buildx-cache-new \
        --tag ${{ env.RELEASE_IMAGE }} \                           
        --target release \                                 
        --push \                                           
        .                                                  
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        
        - name: Deploy to Kubernetes cluster                                                                            
        uses: kodermax/kubectl-aws-eks@master                                                                         
        env:                                                                                                          
          RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.RELEASE_REVISION }}
        with:                                                                                                         
          args: set image deployment/my-pod app=${{ env.RELEASE_IMAGE }} --record -n $KUBE_NAMESPACE   
        - name: Verify Kubernetes deployment                               
          uses: kodermax/kubectl-aws-eks@master                            
          with:                                                            
            args: rollout status deploy my-pod -n $KUBE_NAMESPACE

    - name: Slack notification                                
      uses: rtCamp/action-slack-notify@master                 
      env:                                                    
        SLACK_CHANNEL: my_cool_channel                   
        SLACK_MESSAGE: 'Just deployed our cool application!'
        SLACK_TITLE: 'Deploy'                         
        SLACK_USERNAME: 'Some Bot'                           
        SLACK_ICON: "[icon URL]"
        SLACK_COLOR: '#228B22'                                
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}       
        MSG_MINIMAL: true  


    - name: Print some msg for CD 
      run : echo "CD Deploy to EKS successfully!"
      
   
   
